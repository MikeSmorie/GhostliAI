import React, { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  RadioGroup,
  RadioGroupItem
} from "@/components/ui/radio-group";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  Check,
  ChevronRight,
  FilePlus,
  FileText,
  HelpCircle,
  Globe,
  Users,
  MessageSquare,
  Bookmark,
  RefreshCw,
  X,
  Info,
  Plus,
  Trash2,
  Sparkles,
  Layers,
  BookOpen,
  Settings,
  Sliders
} from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Checkbox } from "@/components/ui/checkbox";
import { Slider } from "@/components/ui/slider";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Types
export interface WritingBrief {
  // Content Purpose
  contentType: string;
  targetAudience: string;
  
  // Tone & Style
  tone: string;
  writingStyle: string;
  gradeLevel: string;
  conciseStyle?: boolean;
  
  // Length & Keywords
  wordCount: number;
  primaryKeywords: string[];
  secondaryKeywords: string[];
  keywordFrequency: string;
  
  // Content Structure
  contentStructure?: string;
  sections: string[];
  formatRequirements: string[];
  
  // Sources and Citations
  sources: {
    url: string;
    description: string;
  }[];
  includeCitations: boolean;
  
  // Revision Instructions
  revisionInstructions: string;
  revisionRounds: number;
}

export interface WritingBriefFormProps {
  onSubmit: (brief: WritingBrief) => void;
  isSubmitting: boolean;
}

const DEFAULT_BRIEF: WritingBrief = {
  contentType: "",
  targetAudience: "",
  tone: "professional",
  writingStyle: "informative",
  gradeLevel: "grade-7-10",
  conciseStyle: false,
  wordCount: 1000,
  primaryKeywords: [],
  secondaryKeywords: [],
  keywordFrequency: "medium",
  contentStructure: "",
  sections: [],
  formatRequirements: [],
  sources: [],
  includeCitations: false,
  revisionInstructions: "",
  revisionRounds: 1,
};

const CONTENT_TYPES = [
  "Ad Copy",
  "Email",
  "Newsletter",
  "Product Description",
  "Landing Page",
  "Blog Post",
  "E-book",
  "Case Study",
  "Press Release",
  "Social Media Post",
  "Academic Paper",
];

const TONES = [
  "Professional",
  "Casual",
  "Formal",
  "Enthusiastic",
  "Authoritative",
  "Friendly",
  "Persuasive",
  "Empathetic",
  "Humorous",
  "Serious",
  "Inspirational",
  "Technical",
];

const WRITING_STYLES = [
  "Informative",
  "Conversational",
  "Narrative",
  "Technical",
  "Academic",
  "Promotional",
  "Analytical",
  "Descriptive",
  "Journalistic",
  "Educational",
  "Persuasive",
  "Tutorial",
];

const FORMAT_REQUIREMENTS = [
  "Headings & Subheadings",
  "Bullet Points",
  "Numbered Lists",
  "Tables",
  "Bold Keywords",
  "Quotes/Testimonials",
  "Image Captions",
  "Call to Action",
  "FAQ Section",
  "Summary Section",
];

const KEYWORD_FREQUENCIES = [
  { value: "low", label: "3-5 times" },
  { value: "medium", label: "6-10 times" },
  { value: "high", label: "11-15 times" },
];

const REVISION_ROUNDS = [
  { value: 1, label: "1 Round" },
  { value: 2, label: "2 Rounds" },
  { value: 3, label: "3 Rounds" },
];

const GRADE_LEVELS = [
  { value: "grade-4-6", label: "Grade 4-6", description: "Simple, clear, accessible writing" },
  { value: "grade-7-10", label: "Grade 7-10", description: "Intermediate complexity for general audiences" },
  { value: "grade-11-12", label: "Grade 11-12", description: "Advanced writing for professional or academic use" },
  { value: "college", label: "College/Professional", description: "High-level content with complex vocabulary and structure" },
];

export function WritingBriefForm({ onSubmit, isSubmitting }: WritingBriefFormProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 6;
  
  const [brief, setBrief] = useState<WritingBrief>(DEFAULT_BRIEF);
  const [newPrimaryKeyword, setNewPrimaryKeyword] = useState("");
  const [newSecondaryKeyword, setNewSecondaryKeyword] = useState("");
  const [newSection, setNewSection] = useState("");
  const [newSource, setNewSource] = useState({ url: "", description: "" });
  
  const updateBrief = (field: string, value: any) => {
    setBrief((prev) => ({ ...prev, [field]: value }));
  };
  
  const addPrimaryKeyword = () => {
    if (!newPrimaryKeyword.trim()) return;
    updateBrief("primaryKeywords", [...brief.primaryKeywords, newPrimaryKeyword.trim()]);
    setNewPrimaryKeyword("");
  };
  
  const removePrimaryKeyword = (index: number) => {
    updateBrief(
      "primaryKeywords",
      brief.primaryKeywords.filter((_, i) => i !== index)
    );
  };
  
  const addSecondaryKeyword = () => {
    if (!newSecondaryKeyword.trim()) return;
    updateBrief("secondaryKeywords", [...brief.secondaryKeywords, newSecondaryKeyword.trim()]);
    setNewSecondaryKeyword("");
  };
  
  const removeSecondaryKeyword = (index: number) => {
    updateBrief(
      "secondaryKeywords",
      brief.secondaryKeywords.filter((_, i) => i !== index)
    );
  };
  
  const addSection = () => {
    if (!newSection.trim()) return;
    updateBrief("sections", [...brief.sections, newSection.trim()]);
    setNewSection("");
  };
  
  const removeSection = (index: number) => {
    updateBrief(
      "sections",
      brief.sections.filter((_, i) => i !== index)
    );
  };
  
  const toggleFormatRequirement = (format: string) => {
    if (brief.formatRequirements.includes(format)) {
      updateBrief(
        "formatRequirements",
        brief.formatRequirements.filter((f) => f !== format)
      );
    } else {
      updateBrief("formatRequirements", [...brief.formatRequirements, format]);
    }
  };
  
  const addSource = () => {
    if (!newSource.url.trim()) return;
    updateBrief("sources", [...brief.sources, { ...newSource }]);
    setNewSource({ url: "", description: "" });
  };
  
  const removeSource = (index: number) => {
    updateBrief(
      "sources",
      brief.sources.filter((_, i) => i !== index)
    );
  };
  
  const goToNextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };
  
  const goToPreviousStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };
  
  const handleSubmit = () => {
    onSubmit(brief);
  };
  
  const isNextStepDisabled = () => {
    switch (currentStep) {
      case 1: // Content Purpose
        return !brief.contentType || !brief.targetAudience;
      case 2: // Tone & Style
        return !brief.tone || !brief.writingStyle;
      case 3: // Length & Keywords
        return brief.wordCount <= 0 || brief.primaryKeywords.length === 0;
      case 4: // Content Structure
        return brief.sections.length === 0;
      default:
        return false;
    }
  };
  
  const renderStepIndicator = () => {
    const stepLabels = [
      { number: 1, label: "Purpose", icon: <Globe className="w-4 h-4" /> },
      { number: 2, label: "Style", icon: <MessageSquare className="w-4 h-4" /> },
      { number: 3, label: "Keywords", icon: <Bookmark className="w-4 h-4" /> },
      { number: 4, label: "Structure", icon: <Layers className="w-4 h-4" /> },
      { number: 5, label: "Sources", icon: <BookOpen className="w-4 h-4" /> },
      { number: 6, label: "Revisions", icon: <RefreshCw className="w-4 h-4" /> },
    ];
    
    return (
      <div className="mb-8 border rounded-md p-2 md:p-4 bg-gray-50 dark:bg-gray-900">
        <div className="flex flex-wrap justify-between">
          {stepLabels.map((step) => {
            const isActive = step.number === currentStep;
            const isCompleted = step.number < currentStep;
            
            return (
              <div 
                key={step.number} 
                className={`
                  flex items-center py-2 px-1 md:px-3 cursor-pointer rounded-md transition-colors
                  ${isActive ? "bg-blue-100 dark:bg-blue-800/40 text-primary" : 
                    isCompleted ? "text-green-600 dark:text-green-400" : "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800/30"}
                  ${step.number <= currentStep ? "cursor-pointer" : "cursor-not-allowed opacity-60"}
                  mb-1 md:mb-0 w-1/3 md:w-auto
                `}
                onClick={() => {
                  if (step.number <= currentStep) {
                    setCurrentStep(step.number);
                  }
                }}
              >
                <div
                  className={`
                    flex items-center justify-center w-7 h-7 rounded-full mr-1 md:mr-2 flex-shrink-0
                    ${isActive ? "bg-primary text-primary-foreground" : 
                      isCompleted ? "bg-green-500 text-white" : "bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-400"}
                  `}
                >
                  {isCompleted ? <Check className="w-4 h-4" /> : step.icon}
                </div>
                <span className="text-xs font-medium hidden sm:block">
                  {step.label}
                </span>
                <span className="text-xs font-medium sm:hidden">
                  {step.number}
                </span>
              </div>
            );
          })}
        </div>
      </div>
    );
  };
  
  return (
    <Card className="w-full">
      <CardHeader className="bg-blue-100 dark:bg-blue-950/50 border-b">
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl flex items-center">
            <FileText className="mr-2 h-5 w-5" />
            Professional Writing Brief
          </CardTitle>
          <Badge variant="outline" className="px-2 py-1 bg-blue-200 dark:bg-blue-900 font-medium">
            Pro Feature
          </Badge>
        </div>
        <CardDescription className="text-blue-800 dark:text-blue-300">
          Define your content requirements step-by-step for precise, professional results
        </CardDescription>
      </CardHeader>
      
      <CardContent className="pt-6">
        <div className="mb-6 p-3 bg-blue-50 dark:bg-blue-950/30 rounded-md border border-blue-100 dark:border-blue-900">
          <p className="text-sm text-blue-700 dark:text-blue-300 flex items-center">
            <HelpCircle className="w-4 h-4 mr-2 inline" />
            Complete each section to create a comprehensive brief. All fields can be edited at any time.
          </p>
        </div>
        
        {renderStepIndicator()}
        
        {/* Step 1: Content Purpose */}
        <div className={currentStep === 1 ? "block" : "hidden"}>
          <div className="space-y-4">
            <div>
              <div className="flex items-center mb-2">
                <Label htmlFor="contentType" className="text-base font-semibold">
                  What is the primary goal of this content?
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Select the type of content you need. This helps set the appropriate format and approach.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <Select
                value={brief.contentType}
                onValueChange={(value) => updateBrief("contentType", value)}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select content type" />
                </SelectTrigger>
                <SelectContent>
                  {CONTENT_TYPES.map((type) => (
                    <SelectItem key={type} value={type}>
                      {type}
                    </SelectItem>
                  ))}
                  <SelectItem value="Other">Other (specify in keywords)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <div className="flex items-center mb-2">
                <Label htmlFor="targetAudience" className="text-base font-semibold">
                  Who is the target audience?
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Describe who will be reading this content, including their profession, 
                        interests, knowledge level, etc.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <Textarea
                id="targetAudience"
                placeholder="e.g., Marketing professionals aged 25-45 with knowledge of SEO"
                value={brief.targetAudience}
                onChange={(e) => updateBrief("targetAudience", e.target.value)}
                className="min-h-[100px]"
              />
            </div>
          </div>
        </div>
        
        {/* Step 2: Tone & Style */}
        <div className={currentStep === 2 ? "block" : "hidden"}>
          <div className="space-y-6">
            <div className="rounded-md border p-4 bg-blue-50/50 dark:bg-blue-950/30">
              <h3 className="text-lg font-semibold mb-4 flex items-center text-blue-800 dark:text-blue-300">
                <MessageSquare className="h-5 w-5 mr-2" />
                Tone & Voice
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="tone" className="text-base font-medium">
                      Content Tone
                    </Label>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="icon" className="h-6 w-6">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="top" align="end" className="w-72">
                          <p>The emotional quality of your content - how it makes readers feel</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  
                  <Select
                    value={brief.tone}
                    onValueChange={(value) => updateBrief("tone", value)}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Select tone" />
                    </SelectTrigger>
                    <SelectContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-1 p-1">
                        {TONES.map((tone) => (
                          <SelectItem 
                            key={tone} 
                            value={tone.toLowerCase()}
                            className="flex items-center px-3 py-2 rounded-md cursor-pointer"
                          >
                            {tone}
                          </SelectItem>
                        ))}
                      </div>
                    </SelectContent>
                  </Select>
                  
                  <div className="text-xs text-muted-foreground italic pl-1">
                    {brief.tone === "professional" && "Clear, direct, and business-appropriate language"}
                    {brief.tone === "casual" && "Relaxed, conversational, and approachable"}
                    {brief.tone === "formal" && "Proper, traditional, and academic language"}
                    {brief.tone === "enthusiastic" && "Energetic, positive, and excited delivery"}
                    {brief.tone === "authoritative" && "Expert, confident, and definitive voice"}
                    {brief.tone === "friendly" && "Warm, inviting, and personable language"}
                    {brief.tone === "persuasive" && "Convincing, compelling, and motivating"}
                    {brief.tone === "empathetic" && "Understanding, caring, and compassionate"}
                    {brief.tone === "humorous" && "Light-hearted, amusing, and entertaining"}
                    {brief.tone === "serious" && "Focused, no-nonsense, and straightforward"}
                    {brief.tone === "inspirational" && "Uplifting, motivating, and encouraging"}
                    {brief.tone === "technical" && "Precise, factual, and specialized terminology"}
                  </div>
                </div>
                
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="writingStyle" className="text-base font-medium">
                      Writing Style
                    </Label>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="icon" className="h-6 w-6">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="top" align="end" className="w-72">
                          <p>The structural approach to presenting information and engaging readers</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  
                  <Select
                    value={brief.writingStyle}
                    onValueChange={(value) => updateBrief("writingStyle", value)}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Select writing style" />
                    </SelectTrigger>
                    <SelectContent>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-1 p-1">
                        {WRITING_STYLES.map((style) => (
                          <SelectItem 
                            key={style} 
                            value={style.toLowerCase()}
                            className="flex items-center px-3 py-2 rounded-md cursor-pointer"
                          >
                            {style}
                          </SelectItem>
                        ))}
                      </div>
                    </SelectContent>
                  </Select>
                  
                  <div className="text-xs text-muted-foreground italic pl-1">
                    {brief.writingStyle === "informative" && "Provides clear, factual information to educate readers"}
                    {brief.writingStyle === "conversational" && "Friendly, approachable style that feels like dialog"}
                    {brief.writingStyle === "narrative" && "Storytelling approach with a clear sequence of events"}
                    {brief.writingStyle === "technical" && "Detailed, precise language for specialized audiences"}
                    {brief.writingStyle === "academic" && "Scholarly style with citations and formal structure"}
                    {brief.writingStyle === "promotional" && "Persuasive content highlighting benefits and features"}
                    {brief.writingStyle === "analytical" && "Examines evidence and presents logical conclusions"}
                    {brief.writingStyle === "descriptive" && "Rich, sensory details that paint a vivid picture"}
                    {brief.writingStyle === "journalistic" && "Factual reporting style with key information first"}
                    {brief.writingStyle === "educational" && "Structured content that facilitates learning"}
                    {brief.writingStyle === "persuasive" && "Convincing arguments that change opinions or behaviors"}
                    {brief.writingStyle === "tutorial" && "Step-by-step instructions for completing tasks"}
                  </div>
                </div>
              </div>
            </div>

            <div className="rounded-md border p-4 bg-gray-50 dark:bg-gray-950/50">
              <h3 className="text-lg font-semibold mb-4 flex items-center text-blue-800 dark:text-blue-300">
                <MessageSquare className="h-5 w-5 mr-2" />
                Content Complexity Level
              </h3>
              
              <div className="space-y-6">
                <div>
                  <div className="flex justify-between mb-3">
                    <Label htmlFor="gradeLevel" className="text-base font-medium">
                      Reading Level:
                    </Label>
                    <Badge variant="outline" className="font-medium">
                      {GRADE_LEVELS.find(level => level.value === brief.gradeLevel)?.label}
                    </Badge>
                  </div>
                  
                  <div className="space-y-4">
                    <div className="py-2">
                      <div className="flex justify-between text-xs text-muted-foreground mb-2">
                        <span>Simple</span>
                        <span>Intermediate</span>
                        <span>Advanced</span>
                        <span>College</span>
                      </div>
                      <div className="relative">
                        <Slider
                          id="gradeLevelSlider"
                          min={0}
                          max={3}
                          step={1}
                          value={[GRADE_LEVELS.findIndex(level => level.value === brief.gradeLevel)]}
                          onValueChange={(value) => {
                            const index = value[0];
                            updateBrief("gradeLevel", GRADE_LEVELS[index].value);
                          }}
                          className="mb-6 mt-2"
                        />
                        <div className="absolute w-full flex justify-between -mt-1">
                          <div className="w-1 h-3 bg-gray-300 dark:bg-gray-700" />
                          <div className="w-1 h-3 bg-gray-300 dark:bg-gray-700" />
                          <div className="w-1 h-3 bg-gray-300 dark:bg-gray-700" />
                          <div className="w-1 h-3 bg-gray-300 dark:bg-gray-700" />
                        </div>
                      </div>
                    </div>
                    
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <div className="text-xs flex items-center text-muted-foreground hover:text-foreground cursor-help">
                            <HelpCircle className="h-3.5 w-3.5 mr-1.5" />
                            What does this mean?
                          </div>
                        </TooltipTrigger>
                        <TooltipContent className="w-80">
                          <p className="mb-2 text-sm font-medium">Reading Level Complexity</p>
                          <ul className="text-xs space-y-1.5">
                            {GRADE_LEVELS.map((level) => (
                              <li key={level.value} className="flex items-start">
                                <span className="font-semibold min-w-24">{level.label}:</span>
                                <span>{level.description}</span>
                              </li>
                            ))}
                          </ul>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                </div>
                
                <div className="border rounded-md p-4 bg-white dark:bg-gray-900 shadow-sm">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="text-sm font-medium">Example at {GRADE_LEVELS.find(level => level.value === brief.gradeLevel)?.label} Level</h4>
                    <Badge variant="secondary" className="text-xs">
                      {brief.gradeLevel === "grade-4-6" && "Flesch-Kincaid: 85-100"}
                      {brief.gradeLevel === "grade-7-10" && "Flesch-Kincaid: 65-84"}
                      {brief.gradeLevel === "grade-11-12" && "Flesch-Kincaid: 50-64"}
                      {brief.gradeLevel === "college" && "Flesch-Kincaid: 30-49"}
                    </Badge>
                  </div>
                  <p className="text-sm italic text-muted-foreground">
                    {brief.gradeLevel === "grade-4-6" && 
                      "The cat sat on the mat. It was warm there. The sun made a bright spot. The cat liked to feel warm. It closed its eyes and went to sleep."}
                    {brief.gradeLevel === "grade-7-10" && 
                      "The feline found comfort on the household rug. The afternoon sunlight created a warm patch that was ideal for relaxation. Content with its spot, the cat's eyelids grew heavy until it drifted off to sleep."}
                    {brief.gradeLevel === "grade-11-12" && 
                      "The domestic feline situated itself upon the floor covering, where the afternoon sun's rays had established a comfortable microclimate. Pleased with this fortuitous thermal condition, the cat gradually surrendered to somnolence."}
                    {brief.gradeLevel === "college" && 
                      "The domesticated felis catus positioned itself strategically on the textile floor covering, where solar radiation had created an optimal thermal environment. Experiencing contentment with this serendipitous meteorological phenomenon, the felid succumbed to a state of temporary unconsciousness characteristic of its species' diurnal habits."}
                  </p>
                </div>
              </div>
            </div>

            <div className="mt-6 rounded-md border p-4 bg-gray-50 dark:bg-gray-950/50">
              <h3 className="text-lg font-semibold mb-4 flex items-center text-blue-800 dark:text-blue-300">
                <Sparkles className="h-5 w-5 mr-2" />
                Writing Style Enhancements
              </h3>
              
              <div className="space-y-4">
                <div className="flex flex-col sm:flex-row sm:items-center justify-between p-3 border rounded-md bg-white dark:bg-gray-900">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <Label htmlFor="conciseStyle" className="text-base font-medium">
                        Concise Writing Style
                      </Label>
                      <Badge variant="outline" className="text-xs">Recommended</Badge>
                    </div>
                    <p className="text-sm text-muted-foreground mb-3 sm:mb-0">
                      Removes redundant phrases for clearer, more direct writing
                    </p>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="icon" className="h-8 w-8">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="left" className="w-80">
                          <div className="space-y-2">
                            <p className="font-medium">Concise Writing Style</p>
                            <p className="text-sm">Automatically removes filler phrases and redundant expressions to make your content more direct and impactful.</p>
                            <div className="bg-slate-100 dark:bg-slate-800 rounded-md p-2 text-sm mt-2">
                              <p className="mb-1 font-medium text-xs">Example:</p>
                              <p className="text-muted-foreground">
                                <span className="line-through text-red-500 dark:text-red-400">This isn't just</span> AI; it's about creating...
                              </p>
                              <p className="text-green-600 dark:text-green-400 mt-2">
                                This is AI, designed to create...
                              </p>
                            </div>
                          </div>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                    
                    <Switch 
                      id="conciseStyle" 
                      checked={brief.conciseStyle} 
                      onCheckedChange={(checked) => updateBrief("conciseStyle", checked)}
                      className="data-[state=checked]:bg-green-500"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Step 3: Length & Keywords */}
        <div className={currentStep === 3 ? "block" : "hidden"}>
          <div className="space-y-6">
            <div className="rounded-md border p-4 bg-blue-50/50 dark:bg-blue-950/30">
              <h3 className="text-lg font-semibold mb-4 flex items-center text-blue-800 dark:text-blue-300">
                <Settings className="h-5 w-5 mr-2" />
                Content Parameters
              </h3>
              
              <div className="space-y-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label htmlFor="wordCount" className="text-base font-medium">
                      Word Count
                    </Label>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="icon" className="h-6 w-6">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="top" align="end" className="w-60">
                          <p>The target length for your content. The AI will aim to be within 10% of this word count.</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  <div className="flex items-center gap-4">
                    <Input
                      id="wordCount"
                      type="number"
                      className="bg-white dark:bg-gray-900"
                  min="100"
                  max="10000"
                  value={brief.wordCount}
                  onChange={(e) => updateBrief("wordCount", parseInt(e.target.value) || 0)}
                  className="w-32"
                />
                <div className="flex-1">
                  <Select
                    value={brief.wordCount.toString()}
                    onValueChange={(value) => updateBrief("wordCount", parseInt(value))}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Choose common length" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="300">Short (300 words)</SelectItem>
                      <SelectItem value="500">Brief (500 words)</SelectItem>
                      <SelectItem value="750">Medium (750 words)</SelectItem>
                      <SelectItem value="1000">Standard (1,000 words)</SelectItem>
                      <SelectItem value="1500">Detailed (1,500 words)</SelectItem>
                      <SelectItem value="2000">Comprehensive (2,000 words)</SelectItem>
                      <SelectItem value="3000">In-depth (3,000 words)</SelectItem>
                      <SelectItem value="5000">Extended (5,000 words)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
            
            <div className="rounded-md border p-4 bg-blue-50/50 dark:bg-blue-950/30">
              <h3 className="text-lg font-semibold mb-4 flex items-center text-blue-800 dark:text-blue-300">
                <Bookmark className="h-5 w-5 mr-2" />
                Keywords & SEO
              </h3>
              
              <div className="space-y-6">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label htmlFor="keywordFrequency" className="text-base font-medium">
                      Keyword Frequency
                    </Label>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="icon" className="h-6 w-6">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="top" align="end" className="w-60">
                          <p>Controls how often your primary keywords will appear in the content</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>

                  <div className="grid grid-cols-3 gap-2">
                    {KEYWORD_FREQUENCIES.map((freq) => (
                      <div 
                        key={freq.value}
                        className={`
                          border rounded-md p-3 text-center cursor-pointer transition-colors
                          ${brief.keywordFrequency === freq.value 
                            ? "bg-primary/10 border-primary" 
                            : "bg-white dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800"}
                        `}
                        onClick={() => updateBrief("keywordFrequency", freq.value)}
                      >
                        <div className="text-sm font-medium">{freq.label}</div>
                        <div className="text-xs text-muted-foreground mt-1">
                          {freq.value === "low" && "Subtle"}
                          {freq.value === "medium" && "Balanced"}
                          {freq.value === "high" && "Emphasized"}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <Label className="text-base font-medium">
                      Primary Keywords
                    </Label>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button variant="ghost" size="icon" className="h-6 w-6">
                            <HelpCircle className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="top" align="end" className="w-72">
                          <p>Main keywords that will appear throughout the content at the selected frequency</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  <div className="flex flex-wrap gap-2 mb-2">
                    {brief.primaryKeywords.length > 0 ? (
                      brief.primaryKeywords.map((keyword, index) => (
                        <Badge key={index} variant="secondary" className="py-1.5 px-3 gap-1.5">
                          {keyword}
                          <X 
                            className="h-3.5 w-3.5 cursor-pointer hover:text-destructive" 
                            onClick={() => removePrimaryKeyword(index)} 
                          />
                        </Badge>
                      ))
                    ) : (
                      <div className="text-sm text-muted-foreground italic">
                        No primary keywords added yet
                      </div>
                    )}
                  </div>
                  <div className="flex gap-2">
                    <Input
                      value={newPrimaryKeyword}
                      onChange={(e) => setNewPrimaryKeyword(e.target.value)}
                      placeholder="Enter a keyword"
                      className="bg-white dark:bg-gray-900"
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      addPrimaryKeyword();
                    }
                  }}
                />
                <Button type="button" onClick={addPrimaryKeyword}>
                  Add
                </Button>
              </div>
              {brief.primaryKeywords.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {brief.primaryKeywords.map((keyword, index) => (
                    <Badge
                      key={index}
                      variant="secondary"
                      className="px-2 py-1 flex items-center gap-1"
                    >
                      {keyword}
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="h-4 w-4 ml-1"
                        onClick={() => removePrimaryKeyword(index)}
                      >
                        <X className="h-3 w-3" />
                      </Button>
                    </Badge>
                  ))}
                </div>
              )}
            </div>
            
            <div>
              <div className="flex items-center mb-2">
                <Label className="text-base font-semibold">
                  Secondary keywords for SEO relevance:
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Provide any secondary keywords that should also be included in the content.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <div className="flex gap-2">
                <Input
                  value={newSecondaryKeyword}
                  onChange={(e) => setNewSecondaryKeyword(e.target.value)}
                  placeholder="Enter a secondary keyword"
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      addSecondaryKeyword();
                    }
                  }}
                />
                <Button type="button" onClick={addSecondaryKeyword}>
                  Add
                </Button>
              </div>
              {brief.secondaryKeywords.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-2">
                  {brief.secondaryKeywords.map((keyword, index) => (
                    <Badge
                      key={index}
                      variant="outline"
                      className="px-2 py-1 flex items-center gap-1"
                    >
                      {keyword}
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="h-4 w-4 ml-1"
                        onClick={() => removeSecondaryKeyword(index)}
                      >
                        <X className="h-3 w-3" />
                      </Button>
                    </Badge>
                  ))}
                </div>
              )}
            </div>

            {/* Keyword Frequency Dropdown */}
            <div>
              <div className="flex items-center mb-2">
                <Label htmlFor="keywordFrequency" className="text-base font-semibold">
                  Keyword Frequency (Primary Keywords):
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Indicate how often you'd like the primary keywords to appear in the content.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <Select
                value={brief.keywordFrequency}
                onValueChange={(value) => updateBrief("keywordFrequency", value)}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Select keyword frequency" />
                </SelectTrigger>
                <SelectContent>
                  {KEYWORD_FREQUENCIES.map((frequency) => (
                    <SelectItem key={frequency.value} value={frequency.value}>
                      {frequency.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
        
        {/* Step 4: Content Structure */}
        <div className={currentStep === 4 ? "block" : "hidden"}>
          <div className="space-y-6">
            <div>
              <div className="flex items-center mb-2">
                <Label htmlFor="contentStructure" className="text-base font-semibold">
                  How should the content be organized?
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Please specify how you'd like the content to be organized. Include any specific flow or structural requirements.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <Textarea
                id="contentStructure"
                placeholder="e.g., Start with a compelling hook, follow with three main arguments in order of importance, end with a strong call to action"
                value={brief.contentStructure || ""}
                onChange={(e) => updateBrief("contentStructure", e.target.value)}
                className="min-h-[100px]"
              />
            </div>
            
            <div className="pt-4 border-t">
              <div className="flex items-center mb-2">
                <Label className="text-base font-semibold">
                  What sections should the content include?
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Define the structure by adding main sections for your content.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <div className="flex gap-2">
                <Input
                  value={newSection}
                  onChange={(e) => setNewSection(e.target.value)}
                  placeholder="e.g., Introduction, Key Benefits, Conclusion"
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      e.preventDefault();
                      addSection();
                    }
                  }}
                />
                <Button type="button" onClick={addSection}>
                  Add
                </Button>
              </div>
              {brief.sections.length > 0 && (
                <div className="mt-4 space-y-2">
                  <Label className="text-sm font-medium">Section Order:</Label>
                  <div className="space-y-2 border rounded-md p-2 bg-gray-50 dark:bg-gray-900">
                    {brief.sections.map((section, index) => (
                      <div
                        key={index}
                        className="flex items-center justify-between bg-white dark:bg-gray-800 p-2 rounded border"
                      >
                        <span className="flex items-center">
                          <Badge variant="outline" className="mr-2">
                            {index + 1}
                          </Badge>
                          {section}
                        </span>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => removeSection(index)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            <div className="pt-2">
              <div className="flex items-center mb-2">
                <Label className="text-base font-semibold">
                  Specific formatting requirements:
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Select any special formatting elements that should be included.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                {FORMAT_REQUIREMENTS.map((format) => (
                  <div key={format} className="flex items-center space-x-2">
                    <Checkbox
                      id={`format-${format}`}
                      checked={brief.formatRequirements.includes(format)}
                      onCheckedChange={() => toggleFormatRequirement(format)}
                    />
                    <label
                      htmlFor={`format-${format}`}
                      className="text-sm cursor-pointer"
                    >
                      {format}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
        
        {/* Step 5: Sources and Citations */}
        <div className={currentStep === 5 ? "block" : "hidden"}>
          <div className="space-y-4">
            <div>
              <div className="flex items-center mb-2">
                <Label className="text-base font-semibold">
                  Provide relevant URLs or research sources:
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p className="max-w-xs">
                        Add up to 5 reference sources to inform the content.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <div className="space-y-2">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                  <Input
                    placeholder="URL"
                    value={newSource.url}
                    onChange={(e) =>
                      setNewSource({ ...newSource, url: e.target.value })
                    }
                    className="md:col-span-1"
                  />
                  <Input
                    placeholder="Description (optional)"
                    value={newSource.description}
                    onChange={(e) =>
                      setNewSource({ ...newSource, description: e.target.value })
                    }
                    className="md:col-span-2"
                  />
                </div>
                <Button
                  type="button"
                  onClick={addSource}
                  disabled={brief.sources.length >= 5}
                  className="w-full"
                >
                  Add Source
                  {brief.sources.length >= 5 && " (Max 5)"}
                </Button>
              </div>
              
              {brief.sources.length > 0 && (
                <div className="mt-4 space-y-2">
                  <Label className="text-sm font-medium">Added Sources:</Label>
                  <div className="space-y-2">
                    {brief.sources.map((source, index) => (
                      <div
                        key={index}
                        className="flex items-center justify-between bg-gray-50 dark:bg-gray-900 p-2 rounded border"
                      >
                        <div className="overflow-hidden">
                          <div className="truncate text-sm font-medium">
                            {source.url}
                          </div>
                          {source.description && (
                            <div className="truncate text-xs text-gray-500 dark:text-gray-400">
                              {source.description}
                            </div>
                          )}
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => removeSource(index)}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            <div className="flex items-center space-x-2 pt-4">
              <Switch
                id="includeCitations"
                checked={brief.includeCitations}
                onCheckedChange={(checked) => updateBrief("includeCitations", checked)}
              />
              <Label htmlFor="includeCitations" className="text-base">
                Include citations in the content
              </Label>
            </div>
          </div>
        </div>
        
        {/* Step 6: Revision/Feedback Instructions */}
        <div className={currentStep === 6 ? "block" : "hidden"}>
          <div className="space-y-6">
            <h3 className="text-lg font-semibold text-primary flex items-center">
              <RefreshCw className="mr-2 h-5 w-5" />
              Enhanced Revisions Section
            </h3>
            <p className="text-sm text-muted-foreground bg-blue-50 dark:bg-blue-950 p-3 rounded-md border border-blue-100 dark:border-blue-900">
              Specify how you'd like your content to be refined after the initial draft. Clear instructions here will help you get the perfect result with fewer iterations.
            </p>

            <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-md border">
              <div className="flex items-center mb-2">
                <Label htmlFor="revisionInstructions" className="text-base font-semibold">
                  Revision Instructions:
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <div className="max-w-xs p-2">
                        <p className="mb-2">Describe any specific changes you'd like to see in the first draft.</p>
                        <p className="text-sm text-muted-foreground italic">Example: "Emphasize data points more prominently" or "Make the intro more compelling"</p>
                      </div>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <Textarea
                id="revisionInstructions"
                placeholder="e.g., Focus on improving clarity in technical sections, prioritize data accuracy over style, maintain consistent voice across revisions..."
                value={brief.revisionInstructions}
                onChange={(e) => updateBrief("revisionInstructions", e.target.value)}
                className="min-h-[150px]"
              />
              <p className="text-sm text-muted-foreground mt-2">
                Be specific about what elements you want refined in subsequent drafts.
              </p>
            </div>

            <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-md border mt-4">
              <div className="flex items-center mb-3">
                <Label htmlFor="revisionRounds" className="text-base font-semibold">
                  Number of Revision Rounds:
                </Label>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" className="ml-2 h-5 w-5">
                        <HelpCircle className="h-4 w-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <div className="max-w-xs p-2">
                        <p className="mb-2">Select how many revisions you anticipate needing.</p>
                        <p className="text-sm text-muted-foreground">More complex content may require multiple rounds of refinement.</p>
                      </div>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <div className="flex flex-wrap gap-3">
                {REVISION_ROUNDS.map((round) => (
                  <div 
                    key={round.value}
                    className={`
                      flex items-center gap-2 p-3 rounded-md border cursor-pointer transition-colors
                      ${brief.revisionRounds === round.value 
                        ? 'bg-primary text-primary-foreground border-primary' 
                        : 'bg-white dark:bg-gray-900 hover:bg-gray-100 dark:hover:bg-gray-800'}
                    `}
                    onClick={() => updateBrief("revisionRounds", round.value)}
                  >
                    {brief.revisionRounds === round.value && <Check className="h-4 w-4" />}
                    <span className="font-medium">{round.label}</span>
                  </div>
                ))}
              </div>
              <p className="text-sm text-muted-foreground mt-3">
                Each revision round allows you to refine your content further based on the initial output.
              </p>
            </div>
            
            <div className="bg-blue-50 dark:bg-blue-950 p-4 rounded-md border border-blue-200 dark:border-blue-800 mt-6">
              <h3 className="text-base font-semibold mb-2 flex items-center">
                <Bookmark className="mr-2 h-4 w-4" />
                Brief Summary
              </h3>
              <Accordion type="single" collapsible className="w-full">
                <AccordionItem value="purpose">
                  <AccordionTrigger className="text-sm">
                    Content Purpose
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-1 pl-4 text-sm">
                      <p>
                        <span className="font-medium">Type:</span>{" "}
                        {brief.contentType || "Not specified"}
                      </p>
                      <p>
                        <span className="font-medium">Audience:</span>{" "}
                        {brief.targetAudience || "Not specified"}
                      </p>
                    </div>
                  </AccordionContent>
                </AccordionItem>
                
                <AccordionItem value="style">
                  <AccordionTrigger className="text-sm">
                    Tone & Style
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-1 pl-4 text-sm">
                      <p>
                        <span className="font-medium">Tone:</span>{" "}
                        {brief.tone || "Not specified"}
                      </p>
                      <p>
                        <span className="font-medium">Style:</span>{" "}
                        {brief.writingStyle || "Not specified"}
                      </p>
                    </div>
                  </AccordionContent>
                </AccordionItem>
                
                <AccordionItem value="keywords">
                  <AccordionTrigger className="text-sm">
                    Length & Keywords
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-1 pl-4 text-sm">
                      <p>
                        <span className="font-medium">Word Count:</span>{" "}
                        {brief.wordCount}
                      </p>
                      <p>
                        <span className="font-medium">Keywords:</span>{" "}
                        {brief.primaryKeywords.length > 0
                          ? brief.primaryKeywords.join(", ")
                          : "None"}
                      </p>
                    </div>
                  </AccordionContent>
                </AccordionItem>
                
                <AccordionItem value="structure">
                  <AccordionTrigger className="text-sm">
                    Content Structure
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-1 pl-4 text-sm">
                      <p>
                        <span className="font-medium">Sections:</span>{" "}
                        {brief.sections.length > 0
                          ? brief.sections.join(" → ")
                          : "Not specified"}
                      </p>
                      <p>
                        <span className="font-medium">Format:</span>{" "}
                        {brief.formatRequirements.length > 0
                          ? brief.formatRequirements.join(", ")
                          : "No special formatting"}
                      </p>
                    </div>
                  </AccordionContent>
                </AccordionItem>

                <AccordionItem value="revisions">
                  <AccordionTrigger className="text-sm">
                    Revisions
                  </AccordionTrigger>
                  <AccordionContent>
                    <div className="space-y-1 pl-4 text-sm">
                      <p>
                        <span className="font-medium">Revision Rounds:</span>{" "}
                        {REVISION_ROUNDS.find(r => r.value === brief.revisionRounds)?.label || `${brief.revisionRounds} Round(s)`}
                      </p>
                      {brief.revisionInstructions && (
                        <p>
                          <span className="font-medium">Instructions:</span>{" "}
                          {brief.revisionInstructions.length > 50 
                            ? brief.revisionInstructions.substring(0, 50) + "..." 
                            : brief.revisionInstructions}
                        </p>
                      )}
                    </div>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </div>
          </div>
        </div>
      </CardContent>
      
      <CardFooter className="flex justify-between border-t p-4">
        <Button
          type="button"
          variant="outline"
          onClick={goToPreviousStep}
          disabled={currentStep === 1}
        >
          Previous
        </Button>
        
        <div className="text-sm text-muted-foreground">
          Step {currentStep} of {totalSteps}
        </div>
        
        {currentStep < totalSteps ? (
          <Button
            type="button"
            onClick={goToNextStep}
            disabled={isNextStepDisabled()}
          >
            Next
            <ChevronRight className="ml-1 h-4 w-4" />
          </Button>
        ) : (
          <Button
            type="button"
            onClick={handleSubmit}
            disabled={isSubmitting}
            className="min-w-24"
          >
            {isSubmitting ? (
              <>
                <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>Generate Content</>
            )}
          </Button>
        )}
      </CardFooter>
    </Card>
  );
}